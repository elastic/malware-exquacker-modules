import logging

from libcsce.error import ConfigNotFoundError
from libcsce.parser import CobaltStrikeConfigParser
from malduck.extractor import Extractor
from malduck.procmem import ProcessMemoryPE
from malduck.yara import YaraRuleMatch

from ..utils import Config, get_rule_metadata

logger = logging.getLogger(__name__)


class CobaltStrike(Extractor):
    family: str = "cobalt_strike"
    yara_rules = ("cobalt_strike",)
    overrides = ["zeus"]
    info: Config = {}

    @Extractor.needs_pe
    @Extractor.rule
    def cobalt_strike(self, p: ProcessMemoryPE, match: YaraRuleMatch) -> Config | bool:

        """
        :param p: ProcessMemory object that contains matched file/dump representation
        :return: config
        """
        from typing import cast

        _info: Config = get_rule_metadata(match)

        _b = p.store()

        _beacon = CobaltStrikeConfigParser(_b, 4)
        try:
            _config: Config = cast(Config, _beacon.parse_config())
        except ConfigNotFoundError:
            logger.info("Sample did not contain a CobaltStrike config")
            return False

        _proc_inject = dict(_config["process-inject"])
        if "stub" in _proc_inject:
            _proc_inject["stub"] = cast(bytes, _proc_inject["stub"]).hex()

        _config = {
            self.family: {
                "beacon_type": _config["beacontype"][0],
                "cfg_caution": _config["cfg_caution"],
                "dns_beacon": _config["dns-beacon"],
                "host_header": _config["host_header"],
                "http": {
                    "get": _config["http-get"],
                    "post": _config["http-post"],
                },
                "jitter": _config["jitter"],
                "kill_data": _config["kill_date"],
                "license_id": _config["license_id"],
                "maxgetsize": _config["maxgetsize"],
                "pipename": _config["pipename"],
                "process_inject": _proc_inject,
                "server": {
                    "hostname": _config["server"]["hostname"],
                    "port": _config["server"]["port"],
                    "public_key": _config["server"]["publickey"].hex(),
                },
                "sleep_time": _config["sleeptime"],
                "smb_frame_header": cast(bytes, _config["smb_frame_header"]).hex()
                if _config["smb_frame_header"]
                else None,
                "spawnto": cast(bytes, _config["spawnto"]).hex(),
                "spawnto_x64": _config["post-ex"]["spawnto_x64"],
                "spawnto_x86": _config["post-ex"]["spawnto_x86"],
                "ssh": _config["ssh"],
                "stage": _config["stage"],
                "user_agent": {"original": _config["useragent_header"]},
            }
        }

        return _config | _info
