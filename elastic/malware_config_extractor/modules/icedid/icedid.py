import logging, re
from malduck.extractor import Extractor
from malduck import procmem,procmempe, xor

log = logging.getLogger()


class IcedID(Extractor):

    family = "icedid"
    yara_rules = "icedid",

    @Extractor.extractor("config_decryption")
    def icedid_config(self, p,  addr):
        log.info('[+] `IcedID loader config decryption YARA signature matched @ %X' % addr)
        
        try: 
            hit = p.uint32v(addr - 3)
            config_location = hit + addr + 1
                       
            #print("Base Address: " + str(hex(addr)))
            #print("Pulled Values for offset addition: " + str(hex(hit)))
            #print("Config Location: " + str(hex(config_location)))

            config_blob = p.readv(config_location,250)
            config_blob = config_blob.replace(b'\x00', b'')

            key = config_blob[:32]
            data = config_blob[32:]
            decrypted_config = xor(key,data)
            if decrypted_config:
                print("\n" + str(decrypted_config))
              
        except Exception as x:
           print(x)
         
        return {
            'family': 'IcedID', 
            'domains': 'decrypted_config'
               }