import logging

from malduck import xor
from malduck.extractor import Extractor

log = logging.getLogger(__name__)


class IcedID(Extractor):

    family = "icedid"
    yara_rules = ("icedid",)

    @Extractor.extractor("config_decryption")
    def icedid_config(self, p, addr):
        log.info(
            "[+] IcedID loader config decryption YARA signature matched @ %X" % addr
        )

        try:
            hit = p.uint32v(addr - 3)
            config_location = hit + addr + 1

            config_blob = p.readv(config_location, 250)
            key = config_blob[:32]
            data = config_blob[64:96]

            decrypted_config = xor(key, data)
            campaign_id = decrypted_config[:4]
            campaign_id = int.from_bytes(campaign_id, "little")

            domains = decrypted_config[4:]
            domains = domains.split(b"\x00")
            domain = domains[0].decode("UTF-8")

        except Exception as x:
            print(x)

        return {
            "family": "IcedID",
            "campaign_id": campaign_id,
            "domains": domain,
            "key": key.hex(),
        }
