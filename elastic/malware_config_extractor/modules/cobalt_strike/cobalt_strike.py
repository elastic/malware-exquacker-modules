import logging

from malduck.extractor import Extractor
<<<<<<< Updated upstream
=======

from malduck.procmem import ProcessMemoryPE
>>>>>>> Stashed changes
from malduck.procmem import ProcessMemory
from malduck.yara import YaraMatch, YaraStringMatch

logger = logging.getLogger(__name__)

from libcsce.parser import CobaltStrikeConfigParser

class CobaltStrike(Extractor):
    family = "cobaltstrike"
    yara_rules = ("cobaltstrike",
                  "Windows_Trojan_CobaltStrike_ee756db7",
                  "Windows_Trojan_CobaltStrike_663fc95d",
                  )
    #overrides = ["zeus"]

    #@Extractor.extractor
    #def cobaltstrike_found(
    #    self, p: ProcessMemory, addr: int, match: YaraStringMatch
    #) -> dict:
    #    """
    #    :param p: ProcessMemory object that contains matched file/dump representation
    #    :param addr: memory address
    #    :return: dictionary of {"family": familyname}
    #    """
    #    logger.info(f"CobaltStrike str {match.identifier} found @ {addr}")
    #    return {"family": "cobaltstrike"}

    @Extractor.needs_pe
    @Extractor.rule('Windows_Trojan_CobaltStrike_ee756db7')
    def cobaltstrike(self, p: ProcessMemoryPE, matches: YaraMatch):
        """
        :param p: ProcessMemory object that contains matched file/dump representation
        :param matches: YaraMatch object with offsets of all matched strings related with the rule
        :return:
        """

        print(matches.__dict__)

        from typing import cast

        _b = p.store()

        _beacon = CobaltStrikeConfigParser(_b, 4)
        _config = _beacon.parse_config()

        _proc_inject = dict(_config["process-inject"])
        if "stub" in _proc_inject:
            _proc_inject["stub"] = cast(bytes, _proc_inject["stub"]).hex()

        _config = {

        "cobaltstrike": {
            "beacon_type": _config["beacontype"][0],
            "cfg_caution": _config["cfg_caution"],
            "dns_beacon": _config["dns-beacon"],
            "host_header": _config["host_header"],
            "http": {
                "get": _config["http-get"],
                "post": _config["http-post"],
            },
            "jitter": _config["jitter"],
            "kill_data": _config["kill_date"],
            "license_id": _config["license_id"],
            "maxgetsize": _config["maxgetsize"],
            "pipename": _config["pipename"],
            "process_inject": _proc_inject,
            "server": {
                "hostname": _config["server"]["hostname"],
                "port": _config["server"]["port"],
                "public_key": _config["server"]["publickey"].hex(),
            },
            "sleep_time": _config["sleeptime"],
            "smb_frame_header": cast(bytes, _config["smb_frame_header"]).hex()
            if _config["smb_frame_header"]
            else None,
            "spawnto": cast(bytes, _config["spawnto"]).hex(),
            "spawnto_x64": _config["post-ex"]["spawnto_x64"],
            "spawnto_x86": _config["post-ex"]["spawnto_x86"],
            "ssh": _config["ssh"],
            "stage": _config["stage"],
            "user_agent": {"original": _config["useragent_header"]},
        }
        }

        return _config

        # todo: what needs to happen here?
