import logging

from malduck.extractor import Extractor
from malduck.procmem import ProcessMemory
from malduck.yara import YaraMatch, YaraStringMatch

logger = logging.getLogger(__name__)


class CobaltStrike(Extractor):
    family = "cobaltstrike"
    yara_rules = ("cobaltstrike",)
    overrides = ["zeus"]

    @Extractor.string
    def cobaltstrike_found(
        self, p: ProcessMemory, addr: int, match: YaraStringMatch
    ) -> dict:
        """
        :param p: ProcessMemory object that contains matched file/dump representation
        :param addr: memory address
        :return: dictionary of {"family": familyname}
        """
        logger.info(f"CobaltStrike str {match.identifier} found @ {addr}")
        return {"family": "cobaltstrike"}

    @Extractor.rule
    def cobaltstrike(self, p: ProcessMemory, matches: YaraMatch):
        """

        :param p: ProcessMemory object that contains matched file/dump representation
        :param matches: YaraMatch object with offsets of all matched strings related with the rule
        :return:
        """
        logger.info(
            f"Found the following matches for the cobalt strike YARA rule: {matches}"
        )
        # todo: what needs to happen here?
